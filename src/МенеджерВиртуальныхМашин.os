#Использовать 1commands
// "c:\Program Files (x86)\OneScript\add\1commands\"

#Использовать logos
// #Использовать fs

// https://technet.microsoft.com/ru-ru/library/hh848559.aspx

Перем Команда;
Перем КомандныйФайл;
Перем ПутьБэкапа;
Перем Приложение;
Перем Расширение;
Перем Гипервизор;
Перем ЭтоWindows;


// Получить имя лога продукта
//
// Возвращаемое значение:
//  Строка   - имя лога продукта
//
Функция ИмяЛога() Экспорт
	Возврат "oscript.lib.vmmanager";
КонецФункции

// Устанавливает контекст окружения
//
// Параметры:
//  СтрГипервизор  - Строка - наименование поддерживаемого гипервизора.
Процедура УстановитьГипервизор(Знач СтрГипервизор) Экспорт
	СтрГипервизор = нрег(СтрГипервизор);
	Если СтрГипервизор="hyper-v" и ЭтоWindows Тогда
		Гипервизор = СтрГипервизор;
		Приложение = "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe";
		Расширение = ".ps1";
		
//      Для 64bit PowerShell если стоит 64 битная система или 32bit PowerShell, если стоит 32 битная система
//      "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"
//      Для 32bit PowerShell на 64 битных системах находится в папке:
//      "C:\Windows\syswow64\Windowspowershell\v1.0\powershell.exe"
		
	КонецЕсли;	
КонецПроцедуры

// Создает новый каталог для последующих бэкапов.
//
// Параметры:
//  Путь  - Строка - Расположение каталога бэкапа.
//
//
Процедура УстановитьПутьБэкапа(Знач ПутьБэкапа) Экспорт
	СоздатьКаталог(ПутьБэкапа);
КонецПроцедуры

// Выгрузка виртуальной машины в бэкап.
//
// Параметры:
//  ИмяВМ  - Массив - Обязательный   - Наименование виртуальной машины или список виртуальных машин через запятую
//  Путь   - Строка - Необязательный - Каталог куда будет выгружаться виртуальные машины. Должен быть пустым.
//
// Возвращаемое значение:
//   Истина - успех, описание ошибки в случае неудачи.
//
Функция Выгрузить( Знач ИмяВМ, Знач Путь = "", Знач ВариантВыгрузки = 1) Экспорт
	
	Если ВариантВыгрузки = 0 ИЛИ ВариантВыгрузки = 1 Тогда
		ВыгрузитьШтатно(ИмяВМ,Путь);
		// Get-VM| Get-VMHardDiskDrive | Where-Object {$_.Path -like 'Диск *'  -and  "_DC2", "_MAIL_TSYS", "_NAT", "_STS" -contains $_.VMName} 
		//| Select-Object -Property VMName -Unique
	КонецЕсли;

	Если ВариантВыгрузки = 0 ИЛИ ВариантВыгрузки = 2 Тогда
		
	КонецЕсли;

КонецФункции // Выгрузить(Знач ИмяВМ)


Функция ВыгрузитьШтатно(Знач ИмяВМ, Знач Путь = "")
	
	ПутьБэкапа = ?(ПустаяСтрока(Путь),ПутьБэкапа,Путь);
	Если ПутьБэкапа=Неопределено Тогда
		ВызватьИсключение "Не задан путь для выгрузки.";
	КонецЕсли;

	КомандныйФайл = Новый КомандныйФайл;
	КомандныйФайл.УстановитьПриложение(Приложение);
	КомандныйФайл.Создать(,Расширение);
	
	ТекстКоманды = "$VMs = Get-VM | Where-Object {$_.Path -notlike 'Диск *'  -and ";
	Если ТипЗнч(ИмяВм)=Тип("Строка") Тогда
		МассивВМ = СтрРазделить(ИмяВМ,",",Ложь);
	Иначе
		МассивВМ =ИмяВМ;
	КонецЕсли;
	
	Запятая = "";
	Для НомерВМ=0 по МассивВМ.КОличество()-1 Цикл
		ВиртуальнаяМашина = СокрЛП(МассивВМ[НомерВМ]);
		Если ПустаяСтрока(ВиртуальнаяМашина) Тогда
			Продолжить;
		КонецЕсли;
		ТекстКоманды = ТекстКоманды + Запятая +" """+ВиртуальнаяМашина+"""";
		Запятая = ",";
	КонецЦикла;
	ТекстКоманды = ТекстКоманды+"-contains $_.name} ";
	ТекстКоманды = ТекстКоманды+"| Select-Object -Property VMName -Unique";

	КомандныйФайл.ДобавитьКоманду(ТекстКоманды);
	КомандныйФайл.ДобавитьКоманду("Export-VM  $VMs -Path """+ПутьБэкапа+""" ");
	
	КодВозврата = КомандныйФайл.Исполнить();
	Возврат КодВозврата;

КонецФункции



// Запущенные = Ложь или Истина
Функция ПолучитьВиртуальныеМашины(Знач Все=Истина) Экспорт
	Если Все Тогда
		СтрокаЗапущенные=""; // ВСЕ
	Иначе
		СтрокаЗапущенные = "Running";
	КонецЕсли;	
	
	КомандныйФайл.УстановитьПриложение(Приложение);
	КомандныйФайл.ПоказыватьВыводНемедленно(Ложь);
	КомандныйФайл.Создать(,Расширение);
	
	ТекстКоманды = " Get-VM";
	Если не ПустаяСтрока(СтрокаЗапущенные) Тогда
		ТекстКоманды = ТекстКоманды + "| Where-Object  {$_.State -eq """+СтрокаЗапущенные+"""} ";
	КонецЕсли;
	ТекстКоманды = ТекстКоманды+" | Select-Object Name";
	КомандныйФайл.ДобавитьКоманду(ТекстКоманды);

	КомандныйФайл.Исполнить();
	СтрСписокВМ = КомандныйФайл.ПолучитьВывод();
	СтрСписокВМ = СтрЗаменить(СтрСписокВМ,"Name","");
	СтрСписокВМ = СтрЗаменить(СтрСписокВМ,"----","");
	МассивВМ    = СтрРазделить(СтрСписокВМ,Символы.ВК+Символы.ПС,Ложь);
	Возврат МассивВМ;
КонецФункции // ПолучитьВиртуальныеМашины()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция Создать(Знач ИмяВМ) Экспорт
	Команда. УстановитьКоманду(Приложение);
	Команда.ДобавитьПараметр("New-VM –Name "+ИмяВМ+"");
	Сообщить("New-VM –Name "+ИмяВМ+"");
	Команда.Исполнить();
	Результат = Команда.ПолучитьВывод();
	Возврат Результат;
КонецФункции // Создать()


// Загрузка виртуальной машины из бэкапа.
//
// Параметры:
//  ПутьXML  - Строка - C:\VM\Virtual Machines\4596AEB4-AB71-43E2-9B1D-4579B7CFC4D1.xmll
//
// Возвращаемое значение:
//   Истина - успех, описание ошибки в случае неудачи.
//
Функция Загрузить(Знач ПутьXML) Экспорт
	Команда.УстановитьКоманду(Приложение);
	Команда.ДобавитьПараметр("Import-VM -Path "+ПутьXML+" -Copy -GenerateNewID");
	Команда.Исполнить();
	Результат = Команда.ПолучитьВывод();
	Возврат ?(ПустаяСтрока(Результат),Истина,Результат);
КонецФункции // Загрузит/(Знач ИмяВМ)

Функция Запустить(Знач ИмяВМ) Экспорт
	Команда.УстановитьКоманду(Приложение);
	Команда.ДобавитьПараметр("Start-VM –Name "+ИмяВМ+"");
	Сообщить("Start-VM –Name "+ИмяВМ+"");
	Команда.Исполнить();
	Результат = Команда.ПолучитьВывод();
	Возврат Результат;
КонецФункции // Создать()

// С помощью ключа Force мы принудительно завершим работу ВМ, не смотря на незавершенные процессы:
// Stop-VM -Name WKS81 -Force
// Для выключения питания используем ключ TurnOff, и ключ Save для сохранение состояния ВМ:
// Stop-VM -Name WKS81 -TurnOff
// Stop-VM -Name WKS81 -Save
Функция Остановить(Знач ИмяВМ, Знач Метод = "-TurnOff") Экспорт
	Команда.УстановитьКоманду(Приложение);
	Команда.ДобавитьПараметр("Stop-VM -Name "+ИмяВМ+"  "+Метод+"");
	Команда.Исполнить();
	Результат = Команда.ПолучитьВывод();
	Возврат Результат;
КонецФункции


Функция Переместить(Знач ИмяВМ, Знач Путь) Экспорт
	Команда.УстановитьКоманду(Приложение);
	Команда.ДобавитьПараметр("Move-VMStorage -VMName "+ИмяВМ+" -DestinationStoragePath ″"+Путь+"″" );
	Сообщить("Move-VMStorage -VMName "+ИмяВМ+" -DestinationStoragePath ″"+Путь+"″" );
	Команда.Исполнить();
	Результат = Команда.ПолучитьВывод();
	Возврат Результат;
КонецФункции // Переместить()

// Инициализация работы библиотеки.
// Задает минимальные настройки.
//
Процедура Инициализация()
	
	Лог = Логирование.ПолучитьЛог(ИмяЛога());
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;
	
	Если не ЭтоWindows Тогда
		ТекстИсключения = "Работа предусмотрена только в ОС Windows!";
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Команда = Новый Команда;
	КомандныйФайл = Новый КомандныйФайл;

	КодировкаВывода = Неопределено; // КодировкаТекста.UTF8;
	
КонецПроцедуры

Инициализация();

// Лог.УстановитьУровень(УровниЛога.Отладка);