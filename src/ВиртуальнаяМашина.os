#Использовать 1commands
#Использовать 1commands
#Использовать logos
#Использовать asserts
#Использовать fs

Перем Приложение; // Путь к исполняемому файлу powershell
Перем Лог; // Лог
Перем ВиртуальнаяМашина;
Перем Работает Экспорт;
Перем Имя Экспорт;
Перем Состояние Экспорт;




// Выгрузка виртуальной машины в бэкап.
//
// Параметры:
//  Путь   - Строка - Каталог куда будет выгружаться виртуальные машины. Должен быть пустым.
//
// Возвращаемое значение:
//   Истина - успех, описание ошибки в случае неудачи.
//
Функция Выгрузить( Знач ПутьБэкапа ) Экспорт
	Ожидаем.Что(ПутьБэкапа, "Передан аргумент неверного типа").ИмеетТип("Строка");

	ЕстьОшибка = Ложь;
	НуженЗапуск = Ложь;

	ТранзитныеДиски = ПолучитьДиски("Транзитные","PoolName");

	Если ТранзитныеДиски.Количество() > 0 Тогда
		Если ПолучитьСостояние() = "Running" Тогда
			НуженЗапуск = Истина;
			Если Не  Остановить("-Force") Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ВыгрузитьВМ(ПутьБэкапа) Тогда

	ПутьКДискам = ПутьБэкапа+"\"+ВиртуальнаяМашина+"\"+"Virtual Hard Disks";

	Ожидаем.Что(ФС.КаталогСуществует(ПутьКДискам), ВиртуальнаяМашина +": Произошел сбой выгрузки. Каталог выгрузки пустой.").ЕстьИстина();

	МассивБэкапДисков = НайтиФайлы(ПутьКДискам, "*.vhdx");
	МассивДисков = ПолучитьДиски("Виртуальные","Path");

	Если МассивБэкапДисков.Количество() =  МассивДисков.Количество() Тогда
		Лог.Информация("Выгрузка " + ВиртуальнаяМашина + " завершена.");
	Иначе
		Лог.Ошибка("Сбой выгрузки " + ВиртуальнаяМашина + "!");
		Лог.Ошибка("У виртуальной машины " + МассивДисков.Количество());
		Лог.Ошибка("В папке бэкапа только " + МассивБэкапДисков.Количество());
		ЕстьОшибка = Истина;
	КонецЕсли;
    Иначе
	Лог.Ошибка("Сбой выгрузки " + ВиртуальнаяМашина + "!");
	ЕстьОшибка = Истина;
	КонецЕсли;

	Если ТранзитныеДиски.Количество() > 0 Тогда
		Если НуженЗапуск Тогда
			Запустить();
		КонецЕсли;
	КонецЕсли; 

	Возврат НЕ ЕстьОшибка;
КонецФункции // Выгрузить(Знач ИмяВМ)

Функция ВыгрузитьВМ( Знач ПутьБэкапа )
	Ожидаем.Что(ПутьБэкапа, "Передан аргумент неверного типа").ИмеетТип("Строка");

	ТекстКоманды = "Export-VM -Name "+ВиртуальнаяМашина+" -Path """ + ПутьБэкапа + """  ";
	Вывод = ВыполнитьКоманду(ТекстКоманды);

	Если НЕ ПустаяСтрока(Вывод) и Не Вывод Тогда
		Лог.Ошибка(Вывод);
		Возврат Ложь;
	КонецЕсли;

	ОднаСекунда = 1000;
	ВремяВыполнения = 7200;
	Ожидание = ТекущаяУниверсальнаяДатаВМиллисекундах() + ВремяВыполнения * ОднаСекунда;
	Статус = "Создание контрольной точки";

	Пока
	    //(Статус = "Экспорт виртуальной машины"
		//Или Статус = "Создание контрольной точки") // Подождем
		Статус <> "Работает нормально"
		И Ожидание > ТекущаяУниверсальнаяДатаВМиллисекундах() Цикл
		Приостановить(60*ОднаСекунда);
		Статус = ПолучитьСтатус();
		Лог.Отладка(Статус);
	КонецЦикла;

	Если Статус <> "Работает нормально" Тогда
		Лог.Ошибка("Вышло время ожидания выгрузки виртуальной машины");
		Возврат Ложь;		
	КонецЕсли;

	Возврат Истина; 
КонецФункции

Функция Запустить() Экспорт

	ТекстКоманды = "Start-VM -Name " + ВиртуальнаяМашина + "";
	
	Вывод = ВыполнитьКоманду(ТекстКоманды);
	Если НЕ ПустаяСтрока(Вывод) и Не Вывод Тогда
		Лог.Ошибка("Ошибка запуска ВМ " + ВиртуальнаяМашина + "");
		Возврат Ложь;
	КонецЕсли;
	Лог.Информация("Запущена остановленная ВМ " + ВиртуальнаяМашина + "");
	Возврат Истина;
КонецФункции // Запустить()

// Возвращаемое значение:
//   Состояние   - Состояние ВМ
//   Варианты "Работает нормально", "Экспорт виртуальной машины" 
Функция ПолучитьСтатус() Экспорт

	ТекстКоманды = "Get-VM -VMName " + ВиртуальнаяМашина + " | select Status";
	Результат = ВыполнитьКоманду(ТекстКоманды, Истина);
	времМассив = ПреобразоватьВыводВМассив(Результат);
	Возврат времМассив.Получить(ВремМассив.Количество()-1);
	
КонецФункции

// Возвращаемое значение:
//   Состояние - Running, Off, описание ошибки в случае неудачи.
//
Функция ПолучитьСостояние() Экспорт
	ОбновитьСостояние();
	Возврат Состояние;
КонецФункции


// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Процедура ОбновитьСостояние()
	
	ТекстКоманды = "Get-VM -VMName " + ВиртуальнаяМашина + "  | Select-Object State";
	Результат = ВыполнитьКоманду(ТекстКоманды, Истина);
	времМассив    = ПреобразоватьВыводВМассив(Результат);
	Состояние = СокрЛП(времМассив[0]);
КонецПроцедуры


//С помощью ключа Force мы принудительно завершим работу ВМ, не смотря на незавершенные процессы:
//Stop-VM -Name WKS81 -Force
//Для выключения питания используем ключ TurnOff, и ключ Save для сохранение состояния ВМ:
//Stop-VM -Name WKS81 -TurnOff
//Stop-VM -Name WKS81 -Save
Функция Остановить(Знач Метод = "-TurnOff") Экспорт
	Ожидаем.Что(Метод, "Передан аргумент неверного типа").ИмеетТип("Строка");

	ТекстКоманды = "Stop-VM -Name " + ВиртуальнаяМашина + " " + Метод + "";
	Вывод = ВыполнитьКоманду(ТекстКоманды);

	Если НЕ ПустаяСтрока(Вывод) и СтрНайти(Вывод, " так как служба интеграции по завершению работы недоступна") > 0 Тогда
		Возврат Остановить("-TurnOff");
	ИначеЕсли НЕ ПустаяСтрока(Вывод) и Не Вывод Тогда
		Лог.Ошибка(Вывод);
		Возврат Ложь;
	КонецЕсли;

	ОднаСекунда = 1000;
	ВремяВыполнения = 7200;
	Ожидание = ТекущаяУниверсальнаяДатаВМиллисекундах() + ВремяВыполнения * ОднаСекунда;
	ОбновитьСостояние();

	Пока
	    //(Статус = "Экспорт виртуальной машины"
		//Или Статус = "Создание контрольной точки") // Подождем
		Состояние <> "Off"
		И Ожидание > ТекущаяУниверсальнаяДатаВМиллисекундах() Цикл
		Приостановить(60*ОднаСекунда);
		ОбновитьСостояние();
		Лог.Отладка(Состояние);
	КонецЦикла;

	Если Состояние <> "Off" Тогда
		Лог.Ошибка("Не удалось остановить " + ВиртуальнаяМашина + ". Закончилось время ожидания.");
		Возврат Ложь;
	КонецЕсли;

	Лог.Информация("Остановлена виртуальная машина " + ВиртуальнаяМашина + ".");
	Возврат Истина; 

КонецФункции

Функция Переместить(Знач Путь) Экспорт
	Ожидаем.Что(Путь, "Передан аргумент неверного типа").ИмеетТип("Строка");

	ТекстКоманды = "Move-VMStorage -VMName " + ВиртуальнаяМашина + " -DestinationStoragePath ″" + Путь + "″";
	Возврат ВыполнитьКоманду(ТекстКоманды);

КонецФункции // Переместить()


// Возвращает массив сетевых коммутаторов
// подключенных к виртуальной машине
Функция ПолучитьКоммутаторы() Экспорт

	ТекстКоманды = "Get-VMNetworkAdapter -VMName " + ВиртуальнаяМашина + " | select SwitchName ";
	Результат = ВыполнитьКоманду(ТекстКоманды, Истина);
	Возврат ПреобразоватьВыводВМассив(Результат);

КонецФункции

Функция ПолучитьСети() Экспорт

	ТекстКоманды = "Get-VMNetworkAdapter -VMName " + ВиртуальнаяМашина + " | select Name, SwitchName, MacAddress ";
	Результат = ВыполнитьКоманду(ТекстКоманды);
	Возврат Результат;

КонецФункции 

// Отключает указанный коммутатор от виртуальной машины
Функция ОтключитьКоммутатор(Знач ИмяКоммутатора) Экспорт
	Ожидаем.Что(ИмяКоммутатора, "Передан аргумент неверного типа").ИмеетТип("Строка");

	ТекстКоманды = "Get-VMNetworkAdapter -VMName " + ВиртуальнаяМашина + "" ;
	ТекстКоманды = ТекстКоманды + " | Where-Object {$_.SwitchName -eq '" + ИмяКоммутатора + "'} ";
	ТекстКоманды = ТекстКоманды + " | Disconnect-VMNetworkAdapter";
	Возврат ВыполнитьКоманду(ТекстКоманды);

КонецФункции

// Подключает указанный коммутатор от виртуальной машины
Функция ПодключитьКоммутатор(Знач ИмяКоммутатора) Экспорт
	Ожидаем.Что(ИмяКоммутатора, "Передан аргумент неверного типа").ИмеетТип("Строка");

	ТекстКоманды = "Get-VMNetworkAdapter -VMName " + ВиртуальнаяМашина + "" ;
	ТекстКоманды = ТекстКоманды + " | Connect-VMNetworkAdapter -SwitchName " + ИмяКоммутатора + "";
	Возврат ВыполнитьКоманду(ТекстКоманды);

КонецФункции

// Добавляет сетевую карту к виртуальной машины
// Параметры
// 
Функция ДобавитьСеть(Знач ИмяСетевогоАдаптера = "", Знач ИмяКоммутатора = "") Экспорт
	Ожидаем.Что(ИмяСетевогоАдаптера, "Передан аргумент неверного типа").ИмеетТип("Строка");
	Ожидаем.Что(ИмяКоммутатора, "Передан аргумент неверного типа").ИмеетТип("Строка");

	ТекстКоманды = "Add-VMNetworkAdapter -VMName "+ВиртуальнаяМашина+"";
	Если ЗначениеЗаполнено(ИмяСетевогоАдаптера) Тогда
		ТекстКоманды = ТекстКоманды + "	-Name """ + ИмяСетевогоАдаптера +  """ " ;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяКоммутатора) Тогда
		ТекстКоманды = ТекстКоманды + "	-SwitchName """ + ИмяКоммутатора +  """ " ;
	КонецЕсли;

	Возврат ВыполнитьКоманду(ТекстКоманды);

КонецФункции

// Удалить сетевой адаптер виртуальной машины
Функция УдалитьСеть(Знач ИмяСетевогоАдаптера) Экспорт
	Ожидаем.Что(ИмяСетевогоАдаптера, "Передан аргумент неверного типа").ИмеетТип("Строка");

	ТекстКоманды = "Remove-VMNetworkAdapter -VMName "+ВиртуальнаяМашина+" -VMNetworkAdapterName "+ИмяСетевогоАдаптера+"";
	Возврат ВыполнитьКоманду(ТекстКоманды);

КонецФункции

Функция УстановитьМакАдрес(Знач ИмяСетевогоАдаптера, Знач МакАдрес = "000000000000")
	Ожидаем.Что(МакАдрес, "Передан аргумент неверного типа").ИмеетТип("Строка");
	Ожидаем.Что(ИмяСетевогоАдаптера, "Передан аргумент неверного типа").ИмеетТип("Строка");

	ТекстКоманды = "Set-VMNetworkAdapter -VMName "+ВиртуальнаяМашина+" -Name "+ИмяСетевогоАдаптера+" ";
	Если МакАдрес = "000000000000" Тогда // Динамический
		ТекстКоманды = ТекстКоманды + " -DynamicMacAddress ";
	иначе
		ТекстКоманды = ТекстКоманды +" -StaticMacAddress """ + МакАдрес + """ ";
	КонецЕсли;

	Возврат ВыполнитьКоманду(ТекстКоманды);
	
КонецФункции

// СтрокаКолонки = "VMName,Name,Path,DiskNumber,ControllerLocation,ControllerNumber,ControllerType,PoolName";
// ВидДиска = Все, Транзитные или Виртуальные
Функция ПолучитьДиски( ВидДиска = "Все", Знач СтрокаКолонки = "*") Экспорт
	Ожидаем.Что(ВидДиска, "Передан аргумент неверного типа").ИмеетТип("Строка");
	Ожидаем.Что(СтрокаКолонки, "Передан аргумент неверного типа").ИмеетТип("Строка");

	Если ВидДиска = "Транзитные" Тогда
		ОтборДисков = "| Where-Object PoolName -like '' ";
	ИначеЕсли ВидДиска = "Виртуальные" Тогда
		ОтборДисков = "| Where-Object Path -like '*.vhdx' ";
	Иначе
		ОтборДисков = "";
	КонецЕсли;

	ТекстКоманды = "Get-vm -Name " + ВиртуальнаяМашина + " | Get-VMHardDiskDrive" + ОтборДисков + " | Format-List -Property " + СтрокаКолонки;

	Результат = ВыполнитьКоманду(ТекстКоманды, Истина);

	времТЗ = ПреобразоватьВыводВТЗ(Результат);

	Возврат времТЗ;

КонецФункции //ПолучитьДиски

// Remove-VMHardDiskDrive -VMName Test -ControllerType SCSI -ControllerNumber 0 -ControllerLocation 2
//
// Параметры:
//  ControllerType
//  ControllerNumber
//  ControllerLocation
//
// Возвращаемое значение:
//  Истина - удачно или Ложь при сбое.
//
Функция ОтключитьДиск(Контроллер, КонтроллерНомер, КонтроллерПозиция) Экспорт
	Ожидаем.Что(Контроллер, "Передан аргумент неверного типа").ИмеетТип("Строка");
	Ожидаем.Что(КонтроллерНомер, "Передан аргумент неверного типа").ИмеетТип("Строка");
	Ожидаем.Что(КонтроллерПозиция, "Передан аргумент неверного типа").ИмеетТип("Строка");

	ТекстКоманды = "Remove-VMHardDiskDrive -VMName " + ВиртуальнаяМашина + " -ControllerType "+Контроллер+" -ControllerNumber "+КонтроллерНомер+" -ControllerLocation " + КонтроллерПозиция;

	Возврат ВыполнитьКоманду(ТекстКоманды);

КонецФункции

Функция ПолключитьДиск(ФизическийДиск, Контроллер, КонтроллерНомер, КонтроллерПозиция) Экспорт
	Ожидаем.Что(Контроллер, "Передан аргумент неверного типа").ИмеетТип("Строка");
	Ожидаем.Что(КонтроллерНомер, "Передан аргумент неверного типа").ИмеетТип("Строка");
	Ожидаем.Что(КонтроллерПозиция, "Передан аргумент неверного типа").ИмеетТип("Строка");

	ТекстКоманды = "Get-Disk "+ФизическийДиск+" | Add-VMHardDiskDrive -VMName " + ВиртуальнаяМашина + " -ControllerType "+Контроллер+" -ControllerNumber "+КонтроллерНомер+" -ControllerLocation " + КонтроллерПозиция;

	Возврат ВыполнитьКоманду(ТекстКоманды);

КонецФункции



Функция ПреобразоватьВыводВТЗ(Результат)

	Лог.Отладка(Результат);
	времМассив = ПреобразоватьВыводВМассив(Результат);
	времТЗ = Новый ТаблицаЗначений;

	Для каждого СтрокаМассива Из времМассив Цикл

		Лог.Отладка(СтрокаМассива);
		Позиция = СтрНайти(СтрокаМассива, ":");
		ИмяКолонки = сокрЛП(Лев(СтрокаМассива, Позиция - 1));
		ЗначКолонки = СокрЛП(Сред(СтрокаМассива, Позиция + 1));

		Если времТЗ.Колонки.Количество() = 0 Тогда // ПерваяКолонка
			времТЗ.Колонки.Добавить(ИмяКолонки);
			ПерваяКолонка = ИмяКолонки;
		КонецЕсли;

		ТекущаяКолонка = времТЗ.Колонки.Найти(ИмяКолонки);
		Если ТекущаяКолонка = Неопределено Тогда
			ТекущаяКолонка = времТЗ.Колонки.Добавить(ИмяКолонки);
		КонецЕсли;

		Если ПерваяКолонка = ИмяКолонки Тогда
			НоваяСтрока = времТЗ.Добавить();
		КонецЕсли;

		Лог.Отладка("Колонка "+ ТекущаяКолонка.Имя +" - Значение "+ЗначКолонки);
		НоваяСтрока.Установить( времТЗ.Колонки.Индекс( ТекущаяКолонка), ЗначКолонки);
		
	КонецЦикла;

	Возврат времТЗ; 

КонецФункции //ПреобразоватьВыводВТЗ


Функция Информация() Экспорт

	ТекстКоманды = "Get-VM -VMName " + ВиртуальнаяМашина + " ";
	Результат = ВыполнитьКоманду(ТекстКоманды, Истина);

	Возврат ПреобразоватьВыводВМассив(Результат);
КонецФункции


Функция ПреобразоватьВыводВМассив(Знач ТекстВывода)

	МассивВывода = СтрРазделить(ТекстВывода,Символы.ВК+Символы.ПС,Ложь);
	Если МассивВывода.Количество() > 1 И Лев(СокрЛП(МассивВывода.Получить(1)), 3) = "---" Тогда
		МассивВывода.Удалить(1);
		МассивВывода.Удалить(0);	
	КонецЕсли;
	Если МассивВывода.Количество() >0 И ПустаяСтрока(МассивВывода.Получить(МассивВывода.Количество() - 1)) Тогда
		МассивВывода.Удалить( МассивВывода.Количество() - 1);
	КонецЕсли;

	Возврат МассивВывода;

КонецФункции

Функция ПолучитьКомандныйФайл()
	КомандныйФайл = Новый КомандныйФайл;
	КомандныйФайл.УстановитьПриложение(Приложение);
	КомандныйФайл.Создать(,".ps1");
	Возврат КомандныйФайл;
КонецФункции


// <Описание функции>
//
// Параметры:
//  ИмяВМ  - Строка - Имя виртуальной машины
//
// Возвращаемое значение:
//   Истина - успех, описание ошибки в случае неудачи.
//
Функция УстановитьВиртуальнуюМашину(Знач ИмяВМ)

	ТекстКоманды = "Get-VM -Name " + ИмяВМ + " | Select-Object State";
	Результат = ВыполнитьКоманду(ТекстКоманды, Истина);
	МассивВМ    = ПреобразоватьВыводВМассив(Результат);

	Если МассивВМ.Количество() = 1 Тогда
		ВиртуальнаяМашина = ИмяВМ;
		Имя = ИмяВМ;
		Состояние = МассивВМ[0];
		Работает = ?(Состояние = "Running", Истина, Ложь);
		Возврат Истина;
	Иначе
		ВызватьИсключение "Не удалось установить виртуальную машину.";
	КонецЕсли;

КонецФункции

//
Функция ВыполнитьКоманду(ТекстКоманды, ОжидатьВывод = Ложь)
	Ожидаем.Что(ТекстКоманды, "ТекстКоманды не может быть пустым!").ИмеетТип("Строка");
	КомандныйФайл = ПолучитьКомандныйФайл();
	КомандныйФайл.УстановитьКодировкуВывода("utf-8");
	КомандныйФайл.ДобавитьКоманду(ТекстКоманды);
	Лог.Отладка(ТекстКоманды);
	ПутьКМ = КомандныйФайл.ПолучитьПуть();
	Лог.Отладка(ПутьКМ);
	КодВозврата = КомандныйФайл.Исполнить();

	Вывод = КомандныйФайл.ПолучитьВывод();

	УдалитьКомандныйФайл(ПутьКМ);
	Если Не ОжидатьВывод и НЕ ПустаяСтрока(Вывод) Тогда
		Если  СтрНайти(Вывод, " 0x5 occurred while reading the console output buffer.") > 0 Тогда
			Лог.Отладка(Вывод);
			Возврат Истина; 
		КонецЕсли;
		Лог.Ошибка(Вывод);
		Возврат Ложь;
	ИначеЕсли ОжидатьВывод Тогда
		Лог.Отладка(Вывод);
		Возврат Вывод;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

Процедура УдалитьКомандныйФайл(ПутьКМ)
	Файл = Новый Файл(ПутьКМ);
	Если Файл.Существует() Тогда
		Попытка
			УдалитьФайлы(ПутьКМ);
			Лог.Отладка("Удалили командный файл");
		Исключение
			Лог.Отладка("Не удалось удалить командный файл
			|" + ОписаниеОшибки());
			КонецПопытки
	КонецЕсли;	
КонецПроцедуры

// Получить имя лога продукта
//
// Возвращаемое значение:
//  Строка   - имя лога продукта
//
Функция ИмяЛога() Экспорт
	Возврат "oscript.lib.vm";
КонецФункции
//Устанавливает контекст окружения
Процедура УстановитьГипервизор()

	Приложение = "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe";

	Файл = Новый Файл (Приложение);
	Если НЕ Файл.Существует() Тогда
		Приложение = "C:\Windows\syswow64\Windowspowershell\v1.0\powershell.exe";
	КонецЕсли;

	Файл = Новый Файл (Приложение);
	Если НЕ Файл.Существует() Тогда
		ТекстИсключения = "Не удалось найти оболочку командной строки powershell.";
		Лог.Ошибка(ТекстИсключения);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	Лог.Отладка("Приложение = %1", Приложение);

//      Для 64bit PowerShell если стоит 64 битная система или 32bit PowerShell, если стоит 32 битная система
//      "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"
//      Для 32bit PowerShell на 64 битных системах находится в папке:
//      "C:\Windows\syswow64\Windowspowershell\v1.0\powershell.exe"
	
КонецПроцедуры
// Инициализация работы библиотеки.
// Задает минимальные настройки.
Процедура ПриСозданииОбъекта(Знач ИмяВМ)
	Ожидаем.Что(ИмяВМ, "Передан аргумент неверного типа").ИмеетТип("Строка");
	
	Лог = Логирование.ПолучитьЛог(ИмяЛога());
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;
	
	Если Не ЭтоWindows Тогда
		ТекстИсключения = "Работа предусмотрена только в ОС Windows!";
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	УстановитьГипервизор();
	Лог.Отладка(ИмяВМ);
	УстановитьВиртуальнуюМашину(ИмяВМ);

КонецПроцедуры
