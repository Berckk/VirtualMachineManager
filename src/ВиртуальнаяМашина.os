#Использовать 1commands
#Использовать logos
#Использовать asserts
#Использовать fs

Перем Приложение;
Перем Расширение;
Перем Команда;
Перем КомандныйФайл;
Перем ВиртуальнаяМашина;
Перем Работает Экспорт;
Перем Имя Экспорт;
Перем Лог;


// Выгрузка виртуальной машины в бэкап.
//
// Параметры:
//  Путь   - Строка - Каталог куда будет выгружаться виртуальные машины. Должен быть пустым.
//
// Возвращаемое значение:
//   Истина - успех, описание ошибки в случае неудачи.
//
Функция Выгрузить( Знач ПутьБэкапа ) Экспорт
	Ожидаем.Что(ПутьБэкапа, "Передан аргумент неверного типа").ИмеетТип("Строка");
	ВыгрузитьВМ(ПутьБэкапа);

	ПутьКДискам = ПутьБэкапа+"\"+ВиртуальнаяМашина+"\"+"Virtual Hard Disks";

	Ожидаем.Что(ФС.КаталогСуществует(ПутьКДискам),"Произошел сбой выгрузки. Каталог выгрузки пустой.").ЕстьИстина();

	МассивБэкапДисков = НайтиФайлы(ПутьКДискам, "*.vhdx");
	МассивДисков = ПолучитьДиски();

	Если МассивБэкапДисков.Количество() =  МассивДисков.Количество() Тогда
		Лог.Информация("Выгрузка "+ВиртуальнаяМашина+" завершена.");
		Возврат Истина;
	Иначе
		Лог.Ошибка("Сбой выгрузки "+ВиртуальнаяМашина+"!");
		Возврат Ложь;
	КонецЕсли;

КонецФункции // Выгрузить(Знач ИмяВМ)

Функция ВыгрузитьВМ( Знач ПутьБэкапа )
	Ожидаем.Что(ПутьБэкапа, "Передан аргумент неверного типа").ИмеетТип("Строка");
	ТекстКоманды = "Export-VM -Name "+ВиртуальнаяМашина+" -Path """ + ПутьБэкапа + """ ";
    Возврат ВыполнитьКоманду(ТекстКоманды);	
КонецФункции

Функция Запустить() Экспорт

	ТекстКоманды = "Start-VM -Name " + ВиртуальнаяМашина + "";
	Возврат ВыполнитьКоманду(ТекстКоманды);

КонецФункции // Создать()

//С помощью ключа Force мы принудительно завершим работу ВМ, не смотря на незавершенные процессы:
//Stop-VM -Name WKS81 -Force
//Для выключения питания используем ключ TurnOff, и ключ Save для сохранение состояния ВМ:
//Stop-VM -Name WKS81 -TurnOff
//Stop-VM -Name WKS81 -Save
Функция Остановить(Знач Метод = "-TurnOff") Экспорт
	Ожидаем.Что(Метод, "Передан аргумент неверного типа").ИмеетТип("Строка");

	ТекстКоманды = "Stop-VM -Name "+ВиртуальнаяМашина+" "+Метод+"";
	Возврат ВыполнитьКоманду(ТекстКоманды);

КонецФункции

Функция Переместить(Знач Путь) Экспорт
	Ожидаем.Что(Путь, "Передан аргумент неверного типа").ИмеетТип("Строка");

	ТекстКоманды = "Move-VMStorage -VMName " + ВиртуальнаяМашина + " -DestinationStoragePath ″" + Путь + "″";
	Возврат ВыполнитьКоманду(ТекстКоманды);

КонецФункции // Переместить()


// Возвращает массив сетевых коммутаторов
// подключенных к виртуальной машине
Функция ПолучитьКоммутаторы() Экспорт

	КомандныйФайл = ПолучитьКомандныйФайл();
	ТекстКоманды = "Get-VMNetworkAdapter -VMName " + ВиртуальнаяМашина + " | select SwitchName ";
	КомандныйФайл.ДобавитьКоманду(ТекстКоманды);
	Лог.Отладка(ТекстКоманды);
	КомандныйФайл.Исполнить();
	Результат = КомандныйФайл.ПолучитьВывод();
	Возврат ПреобразоватьВыводВМассив(Результат);

КонецФункции

Функция ПолучитьСети() Экспорт

	КомандныйФайл = ПолучитьКомандныйФайл();
	ТекстКоманды = "Get-VMNetworkAdapter -VMName " + ВиртуальнаяМашина + " | select Name, SwitchName, MacAddress ";
	КомандныйФайл.ДобавитьКоманду(ТекстКоманды);
	Лог.Отладка(ТекстКоманды);
	КомандныйФайл.Исполнить();
	Результат = КомандныйФайл.ПолучитьВывод();

	Возврат Результат;

КонецФункции 

// Отключает указанный коммутатор от виртуальной машины
Функция ОтключитьКоммутатор(Знач ИмяКоммутатора) Экспорт
	Ожидаем.Что(ИмяКоммутатора, "Передан аргумент неверного типа").ИмеетТип("Строка");

	ТекстКоманды = "Get-VMNetworkAdapter -VMName " + ВиртуальнаяМашина + "" ;
	ТекстКоманды = ТекстКоманды + " | Where-Object {$_.SwitchName -eq '" + ИмяКоммутатора + "'} ";
	ТекстКоманды = ТекстКоманды + " | Disconnect-VMNetworkAdapter";

	Возврат ВыполнитьКоманду(ТекстКоманды);

КонецФункции

// Подключает указанный коммутатор от виртуальной машины
Функция ПодключитьКоммутатор(Знач ИмяКоммутатора) Экспорт
	Ожидаем.Что(ИмяКоммутатора, "Передан аргумент неверного типа").ИмеетТип("Строка");

	ТекстКоманды = "Get-VMNetworkAdapter -VMName " + ВиртуальнаяМашина + "" ;
	ТекстКоманды = ТекстКоманды + " | Connect-VMNetworkAdapter -SwitchName " + ИмяКоммутатора + "";

	Возврат ВыполнитьКоманду(ТекстКоманды);

КонецФункции

// Добавляет сетевую карту к виртуальной машины
// Параметры
// 
Функция ДобавитьСеть(Знач ИмяСетевогоАдаптера = "", Знач ИмяКоммутатора = "") Экспорт
	Ожидаем.Что(ИмяСетевогоАдаптера, "Передан аргумент неверного типа").ИмеетТип("Строка");
	Ожидаем.Что(ИмяКоммутатора, "Передан аргумент неверного типа").ИмеетТип("Строка");

	ТекстКоманды = "Add-VMNetworkAdapter -VMName "+ВиртуальнаяМашина+"";
	Если ЗначениеЗаполнено(ИмяСетевогоАдаптера) Тогда
		ТекстКоманды = ТекстКоманды + "	-Name """ + ИмяСетевогоАдаптера +  """ " ;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяКоммутатора) Тогда
		ТекстКоманды = ТекстКоманды + "	-SwitchName """ + ИмяКоммутатора +  """ " ;
	КонецЕсли;

	Возврат ВыполнитьКоманду(ТекстКоманды);

КонецФункции


// Удалить сетевой адаптер виртуальной машины
Функция УдалитьСеть(Знач ИмяСетевогоАдаптера) Экспорт
	Ожидаем.Что(ИмяСетевогоАдаптера, "Передан аргумент неверного типа").ИмеетТип("Строка");

	ТекстКоманды = "Remove-VMNetworkAdapter -VMName "+ВиртуальнаяМашина+" -VMNetworkAdapterName "+ИмяСетевогоАдаптера+"";

	Возврат ВыполнитьКоманду(ТекстКоманды);

КонецФункции

Функция УстановитьМакАдрес(Знач ИмяСетевогоАдаптера, Знач МакАдрес = "000000000000")
	Ожидаем.Что(МакАдрес, "Передан аргумент неверного типа").ИмеетТип("Строка");
	Ожидаем.Что(ИмяСетевогоАдаптера, "Передан аргумент неверного типа").ИмеетТип("Строка");

	ТекстКоманды = "Set-VMNetworkAdapter -VMName "+ВиртуальнаяМашина+" -Name "+ИмяСетевогоАдаптера+" ";
	Если МакАдрес = "000000000000" Тогда // Динамический
		ТекстКоманды = ТекстКоманды + " -DynamicMacAddress ";
	иначе
		ТекстКоманды = ТекстКоманды +" -StaticMacAddress """ + МакАдрес + """ ";
	КонецЕсли;

	Возврат ВыполнитьКоманду(ТекстКоманды);
	
КонецФункции

// Возвращает массив 
// в каждом значении которого содержится путь к диску виртуальной машины
Функция ПолучитьДиски() Экспорт
	КомандныйФайл = ПолучитьКомандныйФайл();
	ТекстКоманды = "Get-VM -VMName " + ВиртуальнаяМашина + " | Select-Object VMId | Get-VHD | select Path ";
	КомандныйФайл.ДобавитьКоманду(ТекстКоманды);
	Лог.Отладка(ТекстКоманды);
	КомандныйФайл.Исполнить();
	Результат = КомандныйФайл.ПолучитьВывод();
	Возврат ПреобразоватьВыводВМассив(Результат);
КонецФункции


Функция ПреобразоватьВыводВМассив(Знач ТекстВывода)

	МассивВывода = СтрРазделить(ТекстВывода,Символы.ВК+Символы.ПС,Ложь);
	Если Лев(СокрЛП(МассивВывода.Получить(1)),3) = "---" Тогда
		МассивВывода.Удалить(1);
		МассивВывода.Удалить(0);	
	КонецЕсли;
	Если ПустаяСтрока(МассивВывода.Получить(МассивВывода.Количество()-1)) Тогда
		МассивВывода.Удалить(МассивВывода.Количество()-1);
	КонецЕсли;

	Возврат МассивВывода;

КонецФункции

Функция ПолучитьКомандныйФайл()
	КомандныйФайл = Новый КомандныйФайл;
	КомандныйФайл.УстановитьПриложение(Приложение);
	КомандныйФайл.Создать(,Расширение);
	Возврат КомандныйФайл;
КонецФункции


// <Описание функции>
//
// Параметры:
//  ИмяВМ  - Строка - Имя виртуальной машины
//
// Возвращаемое значение:
//   Истина - успех, описание ошибки в случае неудачи.
//
Функция УстановитьВиртуальнуюМашину(Знач ИмяВМ)

	ТекстКоманды = "Get-VM -Name " + ИмяВМ + " | Select-Object State";
	КомандныйФайл = ПолучитьКомандныйФайл();
	КомандныйФайл.ДобавитьКоманду(ТекстКоманды);
	Лог.Отладка(ТекстКоманды);
	КомандныйФайл.Исполнить();
	Результат = КомандныйФайл.ПолучитьВывод();
	МассивВМ    = ПреобразоватьВыводВМассив(Результат);

	Если МассивВМ.Количество() = 1 Тогда
		ВиртуальнаяМашина = ИмяВМ;
		Имя = ИмяВМ;
		Работает = ?(МассивВМ[0] = "Running", Истина, Ложь);
		Возврат Истина;
	Иначе
		ВызватьИсключение "Не удалось установить виртуальную машину.";
	КонецЕсли;

КонецФункции

//
Функция ВыполнитьКоманду(ТекстКоманды)

	КомандныйФайл = ПолучитьКомандныйФайл();
	КомандныйФайл.ДобавитьКоманду(ТекстКоманды);
	Лог.Отладка(ТекстКоманды);
	КодВозврата = КомандныйФайл.Исполнить();

	Вывод = КомандныйФайл.ПолучитьВывод();

	Если НЕ ПустаяСтрока(Вывод) Тогда
		Лог.Ошибка(Вывод);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции


// Получить имя лога продукта
//
// Возвращаемое значение:
//  Строка   - имя лога продукта
//
Функция ИмяЛога() Экспорт
	Возврат "oscript.lib.vm";
КонецФункции
//Устанавливает контекст окружения
Процедура УстановитьГипервизор()

	Приложение = "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe";
	Расширение = ".ps1";

	Файл = Новый Файл (Приложение);
	Если НЕ Файл.Существует() Тогда
		Приложение = "C:\Windows\syswow64\Windowspowershell\v1.0\powershell.exe";
	КонецЕсли;

	Файл = Новый Файл (Приложение);
	Если НЕ Файл.Существует() Тогда
		ТекстИсключения = "Не удалось найти оболочку командной строки powershell.";
		Лог.Ошибка(ТекстИсключения);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	Лог.Отладка("Приложение = %1",Приложение);

//      Для 64bit PowerShell если стоит 64 битная система или 32bit PowerShell, если стоит 32 битная система
//      "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"
//      Для 32bit PowerShell на 64 битных системах находится в папке:
//      "C:\Windows\syswow64\Windowspowershell\v1.0\powershell.exe"
	
КонецПроцедуры
// Инициализация работы библиотеки.
// Задает минимальные настройки.
Процедура ПриСозданииОбъекта(Знач ИмяВМ)
	Ожидаем.Что(ИмяВМ, "Передан аргумент неверного типа").ИмеетТип("Строка");
	
	Лог = Логирование.ПолучитьЛог(ИмяЛога());
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;
	
	Если не ЭтоWindows Тогда
		ТекстИсключения = "Работа предусмотрена только в ОС Windows!";
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Команда = Новый Команда;
	КомандныйФайл = Новый КомандныйФайл;
	КодировкаВывода = Неопределено; //КодировкаТекста.UTF8;

	УстановитьГипервизор();
	УстановитьВиртуальнуюМашину(ИмяВМ);

КонецПроцедуры
